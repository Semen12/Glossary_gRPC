# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from generated import dictionary_pb2 as dictionary__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in dictionary_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DictionaryStub(object):
    """Сервис, предоставляющий функциональность словаря с полным набором CRUD-операций
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTerm = channel.unary_unary(
                '/dictionary.Dictionary/AddTerm',
                request_serializer=dictionary__pb2.AddTermRequest.SerializeToString,
                response_deserializer=dictionary__pb2.AddTermResponse.FromString,
                _registered_method=True)
        self.GetTerm = channel.unary_unary(
                '/dictionary.Dictionary/GetTerm',
                request_serializer=dictionary__pb2.GetTermRequest.SerializeToString,
                response_deserializer=dictionary__pb2.Term.FromString,
                _registered_method=True)
        self.GetAllTerms = channel.unary_unary(
                '/dictionary.Dictionary/GetAllTerms',
                request_serializer=dictionary__pb2.GetAllTermsRequest.SerializeToString,
                response_deserializer=dictionary__pb2.GetAllTermsResponse.FromString,
                _registered_method=True)
        self.UpdateTerm = channel.unary_unary(
                '/dictionary.Dictionary/UpdateTerm',
                request_serializer=dictionary__pb2.UpdateTermRequest.SerializeToString,
                response_deserializer=dictionary__pb2.UpdateTermResponse.FromString,
                _registered_method=True)
        self.DeleteTerm = channel.unary_unary(
                '/dictionary.Dictionary/DeleteTerm',
                request_serializer=dictionary__pb2.DeleteTermRequest.SerializeToString,
                response_deserializer=dictionary__pb2.DeleteTermResponse.FromString,
                _registered_method=True)


class DictionaryServicer(object):
    """Сервис, предоставляющий функциональность словаря с полным набором CRUD-операций
    """

    def AddTerm(self, request, context):
        """C: Create - Добавление нового термина
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTerm(self, request, context):
        """R: Read - Получение информации о конкретном термине
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTerms(self, request, context):
        """R: Read - Получение списка всех терминов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTerm(self, request, context):
        """U: Update - Обновление существующего термина
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTerm(self, request, context):
        """D: Delete - Удаление термина
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DictionaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTerm,
                    request_deserializer=dictionary__pb2.AddTermRequest.FromString,
                    response_serializer=dictionary__pb2.AddTermResponse.SerializeToString,
            ),
            'GetTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTerm,
                    request_deserializer=dictionary__pb2.GetTermRequest.FromString,
                    response_serializer=dictionary__pb2.Term.SerializeToString,
            ),
            'GetAllTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTerms,
                    request_deserializer=dictionary__pb2.GetAllTermsRequest.FromString,
                    response_serializer=dictionary__pb2.GetAllTermsResponse.SerializeToString,
            ),
            'UpdateTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTerm,
                    request_deserializer=dictionary__pb2.UpdateTermRequest.FromString,
                    response_serializer=dictionary__pb2.UpdateTermResponse.SerializeToString,
            ),
            'DeleteTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTerm,
                    request_deserializer=dictionary__pb2.DeleteTermRequest.FromString,
                    response_serializer=dictionary__pb2.DeleteTermResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dictionary.Dictionary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dictionary.Dictionary', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Dictionary(object):
    """Сервис, предоставляющий функциональность словаря с полным набором CRUD-операций
    """

    @staticmethod
    def AddTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dictionary.Dictionary/AddTerm',
            dictionary__pb2.AddTermRequest.SerializeToString,
            dictionary__pb2.AddTermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dictionary.Dictionary/GetTerm',
            dictionary__pb2.GetTermRequest.SerializeToString,
            dictionary__pb2.Term.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dictionary.Dictionary/GetAllTerms',
            dictionary__pb2.GetAllTermsRequest.SerializeToString,
            dictionary__pb2.GetAllTermsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dictionary.Dictionary/UpdateTerm',
            dictionary__pb2.UpdateTermRequest.SerializeToString,
            dictionary__pb2.UpdateTermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dictionary.Dictionary/DeleteTerm',
            dictionary__pb2.DeleteTermRequest.SerializeToString,
            dictionary__pb2.DeleteTermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
